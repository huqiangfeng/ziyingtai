<style lang="less">
.container {
  width: 100%;
  display: flex;
  position: relative;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-family: PingFang SC;
  font-weight: 400;
  // 星星
  .xinxin {
    position: absolute;
    top: 0;
    right: 0;
    .img-xinxin {
      width: 44rpx;
      height: 44rpx;
      display: block;
    }
  }
  // 已租
  .leased {
    position: absolute;
    width: 265rpx;
    border-radius: 12rpx;
    overflow: hidden;
    text-align: center;
    line-height: 50rpx;
    .top {
      background: rgba(201, 171, 121, 0.7);
      font-size: 28rpx;
      font-weight: 500;
      color: #fff;
    }
    .bottom {
      color: #fff;
      background: rgba(201, 171, 121, 1);
      font-size: 24rpx;
    }
  }
  .img {
    width: 100%;
    margin-bottom: 20rpx;
    display: block;
  }
  .name {
    font-size: 28rpx;
    color: #30313b;
  }
  .money {
    font-size: 24rpx;
    color: #30313b;
    margin: 9rpx 0;
  }
  .v-money {
    font-size: 24rpx;
    color: #c8aa78;
  }
}
</style>

<template>
  <div class="container" @tap="on_tapItem">
    <!-- 星星 -->
    <div class="xinxin" v-if="collect">
      <image v-if="collect" class="xinxin-yes img-xinxin" src="https://rent-luxury.oss-cn-shanghai.aliyuncs.com/miniapp/dev/images/yishouchang.png" mode="widthFix"></image>
      <image v-else class="xinxin-no img-xinxin" src="https://rent-luxury.oss-cn-shanghai.aliyuncs.com/miniapp/dev/images/shouchang.png" mode="widthFix"></image>
    </div>
    <!-- 已租用 -->
    <div class="leased" v-if="item.goodsStatus>1">
      <div class="top">
        已租用
      </div>
      <div class="bottom">
        预计还剩{{ dey }}天
      </div>
    </div>
    <!-- 商品 -->
    <image class="img" src="{{ item.goodsIcon }}" mode="widthFix"></image>
    <div class="name">{{item.brandSourceName}}</div>
    <div class="money">¥{{ item.dayRent}}/天</div>
    <div class="v-money">VIP:¥{{item.vipDayRent}}/天</div>
  </div>
</template>

<script>
import wepy from '@wepy/core'
wepy.component({
  props: {
    item: {
      type: [Object],
      default: {}
    },
    collect: {
      type: [Boolean],
      default: false
    }
  },
  dey: {
    not () {
      try {
        let tiem = new Date(this.item.expectSaleDate) - new Date()
        let day = Math.ceil(tiem / 1000 / 60 / 60 / 24)
        day = day > 2 ? day : 2
        return day
      } catch (err) {
        return 2
      }
    }
  },
  methods: {
    on_tapItem () {
      this.$emit('tapitem', this.item)
    }
  },
  attached () {
  }
})
</script>
<config>
{
    usingComponents: {
    }
}
</config>
