<style lang="less">
.page-container {
  height: 100%;
  background-color: #f6f6f6;
  .title {
    line-height: 66rpx;
    width: 100%;
    font-size: 28rpx;
    color: rgba(158, 158, 158, 1);
  }
  .brand-box {
    position: relative;
    background-color: #fff;
    padding: 40rpx;
    display: flex;
    flex-wrap: wrap;
    .option-item {
      margin-bottom: 20rpx;
      &:nth-child(3n) {
        margin: 0 35rpx 20rpx;
      }
    }
  }
  .more {
    width: 100%;
    height: 80rpx;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 28rpx;
    font-weight: 400;
    color: rgba(158, 158, 158, 1);
    margin-bottom: -30rpx;
    .img {
      margin-left: 10rpx;
      width: 19rpx;
      display: block;
    }
  }
  .type-box {
    .brand-box();
    margin-top: 20rpx;
    // padding-bottom: 170rpx;
  }

  .bon-box {
    position: fixed;
    bottom: 0;
    left: 0;
    width: 100%;
    display: flex;
    line-height: 100rpx;
    text-align: center;
    font-size: 36rpx;
    color: #fff;
    .btn-reset {
      flex: 3;
      background: rgba(201, 171, 121, 1);
    }
    .btn-affirm {
      flex: 4;
      background: rgba(48, 49, 59, 1);
    }
  }
}
.turn {
  transform: rotate(180deg);
}
</style>

<template>
  <div class="page-container">
    <!-- 品牌 -->
    <div class="brand-box">
      <div class="title">品牌</div>
      <div class="option-item" @tap="on_brandItem('all')">
        <!-- active="{{ checkedRow === item.brandId }}" -->
        <option-item text="全部" active="{{ allCheckde  }}"></option-item>
      </div>
      <div class="option-item" @tap="on_brandItem(index)" hidden="{{index > 13 && !more}}" v-for="(item, index) in listRows" :key="index">
        <!-- active="{{ checkedRow === item.brandId }}" -->
        <option-item text="{{ item.brandSourceName }}" active="{{ item.checkde  }}"></option-item>
      </div>
      <div v-if="listRows.length > 14" class="more" @tap="more = !more">
        <div>{{ moreText }}</div>
        <image class="img" :class="{'turn':more}" src="https://app.static.luyishepin.vip/miniapp/dev/images/jiantouxia.png" mode="widthFix"></image>
      </div>
    </div>
    <!-- 类型 -->
    <div class="type-box">
      <div class="title">类型</div>
      <div class="option-item" @tap="on_typeItem(index)" v-for="(item, index) in typeList" :key="index">
        <option-item text="{{ item.text }}" active="{{ checkedType === item.id }}" bgc="{{ true }}"></option-item>
      </div>
    </div>
    <div style="height: 100rpx;"></div>
    <!-- btn -->
    <div class="bon-box">
      <div class="btn-reset" @tap="on_reset">重置</div>
      <div class="btn-affirm" @tap="on_submit">确认</div>
    </div>
  </div>
</template>

<script>
import wepy from '@wepy/core'
import { listBrand } from './../../http/api.js'
wepy.page({
  config: {
    navigationBarTitleText: '筛选'
  },
  computed: {
    moreText () {
      return this.more ? '收起' : '展开'
    }
  },
  data: {
    // 更多
    more: false,
    allCheckde: false, // 全部
    // 品牌
    checkedRow: [],
    listRows: [],
    // 类型
    checkedType: '',
    // 排序,可用值:默认=>defaultSort,最新=>releaseDesc,价格降序=>rentPriceDesc,价格升序=>rentPriceAsc
    typeList: [{
      text: '默认',
      id: 'defaultSort'
    }, {
      text: '上新',
      id: 'releaseDesc'
    }, {
      text: '价格升序',
      id: 'rentPriceAsc'
    }, {
      text: '价格降序',
      id: 'rentPriceDesc'
    }]
  },
  methods: {
    // 品牌选择
    on_brandItem (index) {
      if (index == 'all') {
        this.allCheckde = true
        this.checkedRow = this.listRows.map(item => {
          item.checkde = false
          return item.brandId
        })
        return
      } else if (this.allCheckde) {
        this.allCheckde = false
        this.checkedRow = []
      }
      let flg = -1
      for (let index1 = 0; index1 < this.checkedRow.length; index1++) {
        if (this.checkedRow[index1] == this.listRows[index].brandId) {
          flg = index1
        }
      }
      if (flg >= 0) {
        this.checkedRow.splice(flg, 1)
      } else {
        this.checkedRow.push(this.listRows[index].brandId)
      }
      this.listRows[index].checkde = !this.listRows[index].checkde
    },
    // 类型选择
    on_typeItem (index) {
      if (this.checkedType === this.typeList[index].id) {
        this.checkedType = ''
      } else {
        this.checkedType = this.typeList[index].id
      }
    },
    // 重置
    on_reset () {
      this.checkedType = ''
      this.checkedRow = []
      this.listRows.forEach(element => {
        element.checkde = false
      })
    },
    // 提交
    on_submit () {
      const eventChannel = this.$wx.getOpenerEventChannel()

      let data = {
        brandId: this.checkedRow.join(','),
        goodsSort: this.checkedType
      }
      eventChannel.emit('filtrate', data)
      wx.navigateBack({
        delta: 1
      })
    },
    getData () {
      listBrand().then(res => {
        if (res.code === 0) {
          if (res.data.listRows.length === this.checkedRow.length) {
            this.allCheckde = true
          }
          this.listRows = res.data.listRows.map((item, index) => {
            if (this.checkedRow.some(Id => Id == item.brandId) && !this.allCheckde) {
              item.checkde = true
              if (index > 13) {
                this.more = true
              }
            } else {
              item.checkde = false
            }
            return item
          })
        }
      })
    }
  },

  // 监听页面加载
  onLoad () {
    let _this = this
    const eventChannel = this.$wx.getOpenerEventChannel()
    eventChannel.on('checkedFiltrate', function (data) {
      _this.checkedRow = data.brandId ? data.brandId.split(',') : []
      _this.checkedType = data.goodsSort
      _this.getData()
    })
  },
  // 生命周期回调—监听页面显示
  onShow () { },
  // 生命周期回调—监听页面初次渲染完成
  onReady () { }
})
</script>
<config>
{
    usingComponents: {
        "option-item": "./../components/option"
    }
}
</config>
